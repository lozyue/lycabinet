{"version":3,"file":"lycabinet.light.min.js","mappings":"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","sources":["webpack://Lycabinet/webpack/universalModuleDefinition","webpack://Lycabinet/webpack/bootstrap","webpack://Lycabinet/webpack/runtime/define property getters","webpack://Lycabinet/webpack/runtime/hasOwnProperty shorthand","webpack://Lycabinet/./src/utils/util.ts","webpack://Lycabinet/./src/utils/status.ts","webpack://Lycabinet/./src/light.ts","webpack://Lycabinet/./src/core/store.ts","webpack://Lycabinet/./src/core/lycabinet.ts","webpack://Lycabinet/./src/core/lazy-support.ts","webpack://Lycabinet/./src/core/mixin.ts","webpack://Lycabinet/./src/extends/alias.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Lycabinet\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Lycabinet\"] = factory();\n\telse\n\t\troot[\"Lycabinet\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * Utils.js.\r\n * By lozyue.\r\n */\r\n\r\n/**\r\n * Get the item in an array with index. Support negative index.\r\n * @param  {...any} objs \r\n */\r\nexport const arrayIndex = function (arr, index) {\r\n  index = (arr.length + index) % arr.length;\r\n  if (arr[index] === undefined) {\r\n    console.error(`The index ${index} in array ${arr.toString()} is overflowed!`);\r\n  }\r\n  return arr[index];\r\n}\r\n\r\n/**\r\n * Get the target curve path value of the source Object.\r\n * The curve path is a sequenced array\r\n * @param source \r\n * @param objPathes \r\n */\r\nexport function curveGet(source: Object, objPathes: string[]){\r\n  let interim = source, item = '';\r\n  for(let index=0; index<objPathes.length; index++){\r\n    item = objPathes[index];\r\n    interim = interim && interim[item]\r\n    if(interim === void 0 ){\r\n      return void 0;\r\n    };\r\n  }\r\n  return interim;\r\n}\r\n\r\n/**\r\n * Set the consistent even curve path of the source Object \r\n * The curve path is a sequenced array // dot split strings.\r\n * @param source \r\n * @param objPathes \r\n * @param {unknown|Function} value The value assign for the curve object target. Support callback that if target value is a function you should set it in call back.\r\n * @returns { number|true } The number indicator the failed position of the conflict path.\r\n */\r\n export function curveSet(source: Object, objPathes: string[], value: ((target: Object, name: string)=>any)| unknown= null){\r\n  let interim = source, item = '';\r\n  // not the last one.\r\n  let index=0;\r\n  for(; index<objPathes.length-1; index++){\r\n    item = objPathes[index];\r\n    if(is_Defined(interim[item]) ){\r\n      if(is_Object(interim[item])){\r\n        interim = interim[item];\r\n      } else {\r\n        // Unexpected non-object value.\r\n        return index;\r\n      }\r\n    } else \r\n      interim = interim[item] = {};\r\n  };\r\n  // the last\r\n  item = objPathes[index];\r\n  // assign the value.\r\n  if(is_Function(value))\r\n    (value as Function)(interim, item);\r\n  else\r\n    interim[item] = value;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Centralized management.\r\n * Add a listener to window storage event.\r\n * @param { Function } invoke Target invoke function or handle. \r\n * @param { Boolean } remove wheather the action is to remove added storage listener.\r\n */\r\nexport const addStoreListener = (()=>{\r\n  const invokeQueue: Function[]= [];\r\n  window.addEventListener(\"storage\", (eve)=>{\r\n    invokeQueue.forEach(func=>{\r\n      func(eve);\r\n    });\r\n  }, false); // default bubble.\r\n\r\n  return (invoke, remove = false)=>{\r\n    if(remove) \r\n      removeArrayItem(invokeQueue, invoke);\r\n    else invokeQueue.push(invoke);\r\n  }\r\n})();\r\n\r\n/**\r\n * Deep Object.assign source to target.\r\n * @param target\r\n * @param source\r\n */\r\nexport const deepAssign = function (...objs) {\r\n  let merged;\r\n  objs.reduce((target, source) => {\r\n    for (let item in source) {\r\n      if (!(target[item] && is_PlainObject(target[item])) ) {\r\n        target[item] = source[item];\r\n      } else {\r\n        deepAssign(target[item], source[item]);\r\n      }\r\n    }\r\n    merged = target;\r\n    return target;\r\n  }, objs[0]); // The third param is to set default value.\r\n  return merged;\r\n}\r\n\r\n/**\r\n * Just assign the item in supplement which not defined in target.\r\n * If you don't want to override the value of origin Object, supplement is the high performance choice.\r\n * Not deep mode.\r\n * @param {*} target \r\n * @param {*} supplement \r\n */\r\nexport function objectSupplement(target, supplement) {\r\n  let current = null;\r\n  for (let item in supplement) {\r\n    current = target[item];\r\n    if (is_Defined(current))\r\n      continue;\r\n    target[item] = supplement[item];\r\n  }\r\n  return target;\r\n}\r\n\r\n/**\r\n * Just assign the item in supplement which not defined in target.\r\n * If you don't want to override the value of origin Object, supplement is the high performance choice.\r\n * Deep mode by iterate each inner Object.\r\n * @param {*} target \r\n * @param {*} supplement \r\n */\r\nexport function deepSupplement<R extends Object, T extends Object> (target: R|null, supplement: T) {\r\n  if(!target) return supplement;\r\n  let current: unknown = null;\r\n  for (let item in supplement) {\r\n    current = (target as unknown as T)[item];\r\n    if (is_Defined(current)) {\r\n      if (!is_PlainObject(current as Object)) continue;\r\n      deepSupplement(current as Object, supplement[item]); // The `current` is a reference which could be assigned.\r\n    }\r\n    else\r\n      // current = supplement[item];\r\n      (target as unknown as T)[item] = supplement[item];\r\n  }\r\n  return target as (R & T);\r\n}\r\n\r\n\r\n/**\r\n * Simple deepClone with optional Function clone\r\n */\r\nexport function deepClone(val, substituteObj = Object.create(null), cloneFunc = true) {\r\n  if (is_PlainObject(val)) {\r\n    var res = substituteObj;\r\n    for (var key in val) {\r\n      res[key] = deepClone(val[key]);\r\n    }\r\n    return res;\r\n  } else if (is_Array(val)) {\r\n    return val.slice()\r\n  } else if (cloneFunc && is_Function(val)) {\r\n    return Object.create(val.prototype).constructor;\r\n  } else {\r\n    return val;\r\n  }\r\n}\r\n\r\nexport function iterateObject(source: Object, iterate: Function){\r\n  iterate(source);\r\n  for(let item in source){\r\n    if( is_PlainObject(source[item]) )\r\n      iterate(source, iterate);\r\n  }\r\n}\r\n\r\nexport const is_Defined = (v: unknown):Boolean => (v !== undefined && v !== null);\r\nexport const is_Object = (obj: unknown):Boolean => (obj instanceof Object || typeof obj === \"object\");\r\nexport const is_PlainObject = (obj: unknown):Boolean => (Object.prototype.toString.call(obj) === '[object Object]');\r\nexport const is_Array = (obj: unknown):Boolean => (Array.isArray && Array.isArray(obj) || obj instanceof Array || (typeof obj === 'object') && Object.prototype.toString.call(obj).slice(-6,-1)=== 'Array' );\r\nexport const is_String = (str: Object):Boolean => ((typeof str === 'string') && str.constructor == String);\r\nexport const is_Function = (obj: unknown):Boolean => (obj instanceof Function);\r\n\r\nexport const is_Empty = (val: unknown)=>{\r\n  if(!val) return true;\r\n  if(is_Array(val)){\r\n    return !(val as Array<unknown>).length;\r\n  }else{\r\n    return !Object.keys((val) as Object).length;\r\n  }\r\n}\r\n\r\n/*\r\n * Delete the Item in an Array, returning the new Array.\r\n */\r\nexport var removeArrayItem = (arr, item) => {\r\n  if (arr.length) {\r\n    let index = arr.indexOf(item);\r\n    if (index > -1) {\r\n      return arr.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Provide with a processor accept a list of stuff or single stuff\r\n * Give it the action to its inner iterator.\r\n * The original Stuff can not be an Array!\r\n */\r\nexport function arbitraryFree(input, func) {\r\n  if (input.forEach) {\r\n    return input.forEach(func);\r\n  } else {\r\n    return func(input, 0);\r\n  }\r\n}\r\n\r\nexport function storageAvailable(type) {\r\n  var storage;\r\n  try {\r\n    storage = window[type];\r\n    var x = '__storage_test__';\r\n    storage.setItem(x, x);\r\n    storage.removeArrayItem(x);\r\n    return true;\r\n  }\r\n  catch (e) {\r\n    return e instanceof DOMException && (\r\n      // everything except Firefox\r\n      e.code === 22 ||\r\n      // Firefox\r\n      e.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      e.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n      // acknowledge QuotaExceededError only if there's something already stored\r\n      (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\nexport const LogToken = \"[Lycabinet]: \";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production';\r\n\r\nexport const EnvAssociate = {\r\n  Light: false, // light mode.\r\n};\r\n","/**\r\n * Lycabinet Status.\r\n */\r\n\r\nconst CREATED = 'created';\r\nconst MOUNTED = 'mounted';\r\nconst IDLE = 'idle';\r\nconst LOADING = 'loading';\r\nconst SAVING = 'saving';\r\nconst CLEARING = 'clearing';\r\n\r\n\r\nexport {\r\n  CREATED,\r\n  IDLE,\r\n  LOADING,\r\n  SAVING,\r\n  CLEARING,\r\n  MOUNTED,\r\n};\r\n","/**\r\n * The Laction JS(lactionQueue JS) entry file.\r\n * Slight version.\r\n * Only includes the core build (No event system).\r\n * For smaller build bundle.\r\n */\r\n\r\nimport { EnvAssociate } from './utils/util';\r\nimport { InitStore } from './core/store';\r\nimport { InitCore } from './core/lycabinet';\r\nimport { InitLazyDepartment } from './core/lazy-support';\r\nimport { InitMixin } from \"./core/mixin\";\r\n\r\n\r\n// set light on\r\nEnvAssociate.Light = true;\r\n/**\r\n * Using fake event system.\r\n * @param {*} Lycabinet \r\n */\r\nconst InitEventSystem = function(Lycabinet){\r\n  const Protos = Lycabinet.prototype;\r\n  const FakeFunc = new Function();\r\n\r\n  Protos._isHappend = FakeFunc;\r\n  Protos._setlog = FakeFunc;\r\n  Protos._once = FakeFunc;\r\n  Protos._trigger = FakeFunc;\r\n  Protos._off = FakeFunc;\r\n  Protos._on = FakeFunc;\r\n}\r\n\r\n\r\nfunction Lycabinet(...options){\r\n  if (process.env.NODE_ENV !== 'production' && !(this instanceof Lycabinet) ) {\r\n    (global.warn || console.warn)('Lycabinet is a constructor and should be called with the `new` keyword');\r\n    return null;\r\n  }\r\n  this.__init.apply(this, options);\r\n}\r\n\r\nInitStore(Lycabinet);\r\nInitEventSystem(Lycabinet);\r\nInitCore(Lycabinet);\r\nInitLazyDepartment(Lycabinet);\r\nInitMixin(Lycabinet);\r\n\r\n/**\r\n * Manually select the optional Extends modules.\r\n */ \r\n// import { initImbedding } from './core/immbedding';\r\n// initImbedding(Lycabinet);\r\n\r\n// import { addFilter } from './extends/filter';\r\n// addFilter(Lycabinet);\r\n\r\n// import { addObserver } from './extends/observer';\r\n// addObserver(Lycabinet);\r\n\r\n// import { addCheck } from './extends/check';\r\n// addCheck(Lycabinet);\r\n\r\n// import { addZip } from './extends/zip';\r\n// addZip(Lycabinet);\r\n\r\nimport { initAlias } from './extends/alias';\r\ninitAlias(Lycabinet);\r\n\r\n\r\nexport default Lycabinet;\r\n","/**\r\n * Given a private cabinet for every set storage.\r\n * Cabinet Basement.\r\n */\r\n\r\nimport { DEBUG, is_Defined, is_PlainObject } from \"../utils/util\";\r\n\r\nexport function InitStore(Lycabinet){\r\n  const __cabinet = Object.create(null);\r\n  DEBUG && (window[\"__cabinet\"] = __cabinet);\r\n  const Proto = Lycabinet.prototype;\r\n\r\n  /**\r\n   * Get the exact cabinet of current instance.\r\n   */\r\n  Proto.getCabinet = function(){\r\n    return this.__storage;\r\n  }\r\n\r\n  /**\r\n   * Conclude whether the current cabinet is consistent with the inner cache.\r\n   * @returns { Boolean }\r\n   */\r\n  Proto.isIdentical = function(){\r\n    return this.__storage === __cabinet[this.__root];\r\n  }\r\n\r\n  Proto.hasStore = function(){\r\n    return is_Defined(__cabinet[this.__root]) && is_PlainObject(__cabinet[this.__root]);\r\n  }\r\n\r\n  /**\r\n   * Get the cached cabinet access.\r\n   * @returns {Plain Object} __cabinet ; The reference of the storage Object property been cached.\r\n   * Each instance is shared by the root key.\r\n   */\r\n  Proto.getStore = function(){\r\n    return __cabinet[this.__root];\r\n  }\r\n  \r\n  /**\r\n   * To initialize the cabinet cache. \r\n   * @param {Plain Object} cabinet \r\n   */\r\n  Proto.setStore = function(cabinet){\r\n    __cabinet[this.__root] = cabinet;\r\n  }\r\n\r\n  /**\r\n   * To clear the inner cache of cabinet.\r\n   * Defaultly prevent sharing elimination.\r\n   */\r\n  Proto.removeStore = function(){\r\n    if(this.options.useSharedCabinet \r\n      || !this.options.shareCabinet \r\n      || !this.isIdentical()\r\n    ) return false;\r\n    __cabinet[this.__root] = void 0;\r\n  }\r\n\r\n  Lycabinet.$removeStore = function(root: string){\r\n    __cabinet[root] = void 0;\r\n  }\r\n\r\n  DEBUG && (Lycabinet.$getStore = function(root: string){\r\n    return __cabinet[root];\r\n  });\r\n}\r\n","/**\r\n * lycabinet.js\r\n * A slight JSON Type Object storage helper with good performance.\r\n * 一个适用于JSON对象数据存储的轻量辅助类。\r\n * @author Lozyue\r\n * @createdTime 2021-03-28\r\n */\r\n\r\nimport { ConstructOptions, AccessOptions } from '@/typings/lycabinet';\r\nimport * as _STATUS from '@/utils/status';\r\nimport { \r\n  deepAssign, arbitraryFree, \r\n  is_Defined, is_PlainObject, is_Empty, is_String,\r\n  LogToken, DEBUG, \r\n} from '@/utils/util';\r\n\r\nexport function InitCore(Lycabinet){\r\n  // Constructor Options\r\n  Lycabinet.DEBUG = true;\r\n  Lycabinet.SeparateLog = false;\r\n\r\n  const Proto = Lycabinet.prototype;\r\n  /**\r\n   * The configuration initialization.\r\n   * @param { String } root \r\n   * @param { Object } options \r\n   */\r\n  Proto.__init = function(root: string, options: Partial<ConstructOptions> = {} ){\r\n\r\n    if(options.initStorage && !is_PlainObject(options.initStorage) ){\r\n      throw new Error(`${LogToken}The type of the provided option \"initStorage\" must be an Object!`);\r\n    }\r\n    if( !is_String(root)) \r\n      throw new Error(`${LogToken}The param \"root\" should be an string, than type ${typeof root}!`);\r\n    this.__root = (root || 'lycabinet') + ''; // The key in storage. Must be a string.\r\n\r\n    // default options.\r\n    const defaultOptions = {\r\n      root: this.__root,\r\n      autoload: true,\r\n      lazyPeriod : ~~(options.lazyPeriod as number) || 5000, // set the lazy period of lazySave methods.\r\n      saveMutex: true,\r\n      autoLazy: true, // Call lazy save automaticly when the save is busy. \r\n      logEvent: false, // use this to log event globally from scratch\r\n      useSharedCabinet: true, // use global shared cabinet\r\n      shareCabinet: true, // share the cabinet for global\r\n      // Weather use deepAssign to contact when load from outer data.\r\n      deepMerge: false, \r\n      // local interfaces of storage\r\n      localInterface: {\r\n        database: window.localStorage,\r\n        getItem: \"getItem\",\r\n        setItem: \"setItem\",\r\n        removeItem: \"removeItem\",\r\n      }, \r\n      concurrent: !!(options.outerLoad || options.outerSave || options.outerClear),\r\n      outerLoad: null,\r\n      outerSave: null,\r\n      outerClear: null,\r\n    };\r\n    this.options = deepAssign(defaultOptions, options);\r\n    // Make the privilege.\r\n    this.__install(defaultOptions);\r\n    \r\n    // root event console log\r\n    if(defaultOptions.logEvent) this._setlog();\r\n\r\n    this.status = _STATUS.CREATED;\r\n    this._trigger(\"created\");\r\n    \r\n    if(defaultOptions.autoload) this._init(options.initStorage || Object.create(null) );\r\n  };\r\n\r\n  /**\r\n   * Initialize the cabinet storage before 'CURD' manipulation.\r\n   * If autoload is not setted, you should call this manually.\r\n   * Todo: add reduplicate._init check and warning.\r\n   */\r\n  Proto._init = function(cabinet = null){\r\n    cabinet = cabinet || this.options.initStorage || Object.create(null);\r\n    // write protection backflow\r\n    const writeBackflow = function(){\r\n      if(is_Empty(this.__tempStorage)) return;\r\n      // backflow\r\n      deepAssign(this.__storage, this.__tempStorage);\r\n      this.__tempStorage = Object.create(null);\r\n      this._trigger(\"writeBackflow\");\r\n    }\r\n    this._on(\"loaded\", writeBackflow);\r\n    this._on(\"cleared\", writeBackflow);\r\n\r\n    // override the options by the already existed cabinet.\r\n    // this is global shared with all the instance in the page.\r\n    const isLoadFromCache = this.options.useSharedCabinet && this.hasStore();\r\n    if(isLoadFromCache){\r\n      // this.__storage = cabinet = this.getStore(); // That's useless cause cabinet is just a Object reference.\r\n      this.__storage = this.getStore();\r\n      // Sync status.\r\n      Object.assign(cabinet, this.__storage);\r\n      this._trigger(\"loadFromCache\");\r\n    }\r\n    else{\r\n      this.__storage = this.__storage || cabinet;\r\n      if(this.options.shareCabinet)\r\n        this.setStore(this.__storage);\r\n    }\r\n\r\n    this.status = _STATUS.MOUNTED;\r\n    this._trigger(\"mounted\"); // Interior cabinet access attainable.\r\n\r\n    if(!isLoadFromCache){\r\n      // Auto load. Only when the cabinet in using is private.\r\n      if(this.options.autoload) this.load(); // default using shallow assign.\r\n      else this.status = _STATUS.IDLE; // Amend the status.\r\n    } else {\r\n      this.status = _STATUS.IDLE; // Amend the status.\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Test the cabinet is busy or not.\r\n   */\r\n  Proto.isVacant = function(){\r\n    return this.status===_STATUS.IDLE;\r\n  }\r\n\r\n  /**\r\n   * Set an item with key.\r\n   * Added write protection on stage of loading and clearing.\r\n   * @param {*} key \r\n   * @param {*} value \r\n   */\r\n  Proto.set = function(key, value){\r\n    const MutexStatus = [_STATUS.LOADING, _STATUS.CLEARING];\r\n    // add write protection.    \r\n    if(MutexStatus.indexOf(this.status) > -1){\r\n      this._trigger(\"writeLock\");\r\n      this.__tempStorage = this.__tempStorage || (this.__tempStorage = Object.create(null));\r\n      this.__tempStorage[key] = value;\r\n      return this;\r\n    }\r\n\r\n    this.__storage[key] = value;\r\n    this._trigger('setItem', key, value);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Get the value of an item by key.\r\n   * Please don't read from loading and clearing stream.\r\n   * @param {*} key \r\n   */\r\n  Proto.get = function(key){\r\n    let backValue = this.__storage[key];\r\n    this._trigger('getItem', key, backValue);\r\n    return backValue;\r\n  }\r\n\r\n  /**\r\n   * Delete an item by key.\r\n   */ \r\n  Proto.remove = function(keys: string[]){\r\n    let removed = false;\r\n    arbitraryFree(keys, (k)=>{\r\n      // Though it isn't disappeared immediately, But after JSON parse and stringify manipulations this will be cleared.\r\n      if(this.__storage.hasOwnProperty(k)){\r\n        this.set(k, void 0);\r\n        removed = true\r\n      }\r\n    }); \r\n    removed && this._trigger('removeItem', keys, removed);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Delete the cabinet directly.\r\n   * But the data may still exist in memory(RAM).  \r\n   * @param {Boolean} onCloud \r\n   * @param {Boolean} concurrent Override the default options in `this.options.concurrent`\r\n   */\r\n  Proto.clear = function(option: AccessOptions & { reset?: boolean } = {}){\r\n    // merge default options.\r\n    const concurrent = is_Defined(option.concurrent)? option.concurrent: this.options.concurrent;\r\n    const onCloud = (is_Defined(option.onCloud)? option.onCloud: !!this.options.outerClear) as boolean;\r\n    this.status = _STATUS.LOADING;\r\n    this._trigger('beforeClear');\r\n    \r\n    // Local clear\r\n    let localClear = ()=>{\r\n      const IgnoreLocal = onCloud && !concurrent;\r\n      this._trigger('beforeLocalClear', IgnoreLocal); // give an status token before invoke.\r\n\r\n      if(IgnoreLocal){\r\n        DEBUG && console.log(`${LogToken}The local clear action is ignored by options: concurrent:false.`);\r\n        return this;\r\n      }\r\n      const localApi = this.options.localInterface;\r\n      localApi.database[localApi.removeItem]( this.__root );\r\n      // trigger hook event after call local database to clear the Item.\r\n      this._trigger('localCleared', this.__root); // Give the param of the remove target. \r\n    }\r\n\r\n    const toEnd = (isSuccess: boolean)=>{\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('cleared', onCloud, concurrent);\r\n      // Callback\r\n      option.onceDone && option.onceDone(isSuccess, onCloud);\r\n    };\r\n\r\n    // Cloud clear\r\n    const pack = [this.__root, this.__storage];\r\n    const onSuccess = ()=>{\r\n      toEnd(true);\r\n    }\r\n    const onError = (msg, reason='cloudClearings')=>{\r\n      toEnd(false);\r\n\r\n      if(this._trigger(\"error\", \"clear\", reason) !== true ){\r\n        onCloud && console.error(`${LogToken}Failed tfo Clear the cabinet \"${this.__root}\" on cloud. ${msg}`);\r\n      }\r\n    }\r\n\r\n    // handle this async or asyn easily.\r\n    try{\r\n      // Reset the inner cabinet to vacant Object.\r\n      if(option.reset){\r\n        Reflect.ownKeys(this.__storage).forEach(item=>{\r\n          delete this.__storage[item];\r\n        });\r\n      }\r\n\r\n      localClear();\r\n      if(onCloud) \r\n        this.options.outerClear(pack, onSuccess, onError);\r\n      else {\r\n        toEnd(true);\r\n      }\r\n    } catch(e){\r\n      onError(e, \"unknown\");\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Load the cabinet on initialization.\r\n   * The local load is faster than cloud.\r\n   * @param { Boolean } onCloud \r\n   * @param { Boolean } concurrent Override the default options in `this.options.concurrent`\r\n   * @param { Boolean } deepMerge Using deepAssign instead of Object.assign to merge the data from local and cloud.\r\n   */\r\n  Proto.load = function(option: AccessOptions = {}){\r\n    // merge default options.\r\n    const concurrent = is_Defined(option.concurrent)? option.concurrent: this.options.concurrent;\r\n    const onCloud = (is_Defined(option.onCloud)? option.onCloud: !!this.options.outerLoad) as boolean;\r\n    const deepMerge = is_Defined(option.deepMerge)? ~~(option.deepMerge as Boolean): this.options.deepMerge;\r\n    this.status = _STATUS.LOADING;\r\n    this._trigger(\"beforeLoad\");\r\n\r\n    // Local load \r\n    let localLoad = ()=>{\r\n      let localTemp = null;\r\n      const IgnoreLocal = onCloud && !concurrent;\r\n      this._trigger('beforeLocalLoad', IgnoreLocal); // give an status token before invoke.\r\n\r\n      if(IgnoreLocal){\r\n        DEBUG && console.log(\"${LogToken}The local load action is ignored by options: concurrent=false.\");\r\n        return this;\r\n      }\r\n      const localApi = this.options.localInterface;\r\n      \r\n      let initialData = localApi.database[localApi.getItem]( this.__root );\r\n      // trigger hook event after call local database to parse the value. \r\n      // Should have a return value in event. (data)=>{ return handle(data); }\r\n      initialData = this._trigger('localLoaded', initialData); // Only take effect on the last element.\r\n\r\n      localTemp = JSON.parse( initialData );\r\n      if(deepMerge)\r\n        deepAssign(this.__storage, localTemp);\r\n      else\r\n        Object.assign(this.__storage, localTemp);\r\n    };\r\n\r\n    const toEnd = (isSuccess: boolean)=>{\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('loaded', onCloud, concurrent);\r\n      // Callback\r\n      option.onceDone && option.onceDone(isSuccess, onCloud);\r\n    }\r\n\r\n    // Cloud load\r\n    const pack = [this.__root, this.__storage];\r\n    const onSuccess = (data)=>{\r\n      if(!is_Defined(data) || !is_PlainObject(data))\r\n        throw new Error(`${LogToken}Load cabinet with empty 'data' which type is ${typeof data}`);\r\n        \r\n      if(deepMerge)\r\n        deepAssign(this.__storage, data);\r\n      else \r\n      // shallow assign makes cloud weight heavier.\r\n        Object.assign(this.__storage, data);\r\n      \r\n      toEnd(true);\r\n    }\r\n    const onError = (msg, reason='cloudLoadings')=>{\r\n      toEnd(false);\r\n\r\n      if(this._trigger(\"error\", \"load\", reason) !== true){\r\n        onCloud && console.error(`${LogToken}Failed to Load the cabinet \"${this.__root}\" on cloud. ${msg}`);\r\n      }\r\n    }\r\n\r\n    // handle this async or asyn easily.\r\n    try{\r\n      localLoad();\r\n      if(onCloud) \r\n        this.options.outerLoad(pack, onSuccess, onError);\r\n      else {\r\n        toEnd(true);\r\n      }\r\n    } catch(e){\r\n      onError(e, \"unknown\");\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Save the cabinet to database or cloud.\r\n   * The event `localSaved` is called before real action for storage hook.\r\n   * @param {*} onCloud \r\n   * @param {Boolean} concurrent Override the default options in `this.options.concurrent`\r\n   */\r\n  Proto.save = function(option: AccessOptions = {}){\r\n    // merge default options.\r\n    const onCloud = (is_Defined(option.onCloud)? option.onCloud: !!this.options.outerSave) as boolean;\r\n    const concurrent = is_Defined(option.concurrent)? option.concurrent: this.options.concurrent;\r\n\r\n    // check the status for mutex protection\r\n    let check = this.options.saveMutex && !this.isVacant();\r\n    this._trigger(\"beforeSave\", check);\r\n    if( check ){\r\n      DEBUG && console.log(`${LogToken}The 'save' manipulation is deserted for busy. Current Status: ${this.status} .Set 'saveMutex' false to disable it.`);\r\n      this._trigger(\"busy\", this.status);\r\n      this.options.autoLazy && this.lazySave(onCloud, concurrent);\r\n      return this;\r\n    }\r\n    \r\n    this.status = _STATUS.SAVING;\r\n\r\n    // Local save \r\n    let localSave = ()=>{\r\n      const IgnoreLocal = onCloud && !concurrent;\r\n      this._trigger('beforeLocalSave', IgnoreLocal); // give an status token before invoke.\r\n\r\n      if(IgnoreLocal){\r\n        DEBUG && console.log(\"${LogToken}The local save action is ignored by options: concurrent=false.\");\r\n        return this;\r\n      }\r\n      // trigger hook event beforeLocalSave. Should have a return value in event. (data)=>{ return handle(data); }\r\n      let finalData = JSON.stringify(this.__storage );\r\n      // trigger hook event before call local database to save the value for data interceptor.\r\n      finalData = this._trigger('localSaved', finalData); // Only take effect on the last element.\r\n\r\n      const localApi = this.options.localInterface;\r\n      localApi.database[localApi.setItem](this.__root, finalData);\r\n    };\r\n    \r\n    const toEnd = (isSuccess: boolean)=>{\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('saved', onCloud, concurrent);\r\n      // Callback\r\n      option.onceDone && option.onceDone(isSuccess, onCloud);\r\n    }\r\n\r\n    // Cloud save\r\n    const pack = [this.__root, this.__storage];\r\n    const onSuccess = ()=>{\r\n      toEnd(true);\r\n    }\r\n    const onError = (msg, reason=\"cloudSavings\")=>{\r\n      toEnd(false);\r\n\r\n      if(this._trigger(\"error\", \"save\", reason) !== true){\r\n        onCloud && console.error(`${LogToken}Failed to Save the cabinet \"${this.__root}\" on cloud. ${msg}`);\r\n      }\r\n    }\r\n\r\n    // handle this async or asyn easily.\r\n    try{\r\n      localSave();\r\n      if(onCloud) \r\n        this.options.outerSave(pack, onSuccess, onError);\r\n      else {\r\n        toEnd(true);\r\n      }\r\n    } catch(e){\r\n      onError(e, 'unknown');\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Map methods support.\r\n   * Iterate the first hierarchy with callback.\r\n   * @param {Function: (item, key, cabinet)=>any }} callback with two params\r\n   */\r\n  Proto.forEach = function(callback: (item: any, key: string, cabinet: Object)=>any){\r\n    let item;\r\n    const cabinet = this.__storage;\r\n    for(let key in cabinet){\r\n      item = cabinet[key];\r\n      callback(item, key, cabinet); // only two params.\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Foreach methods support.\r\n   * Iterate the first hierarchy with callback.\r\n   * @param {Function: (item, key, cabinet)=>any }} callback  with two params\r\n   */\r\n  Proto.map = function(callback: (item: any, key: string, cabinet: Object)=>any){\r\n    let item;\r\n    const cabinet = this.__storage;\r\n    for(let key in cabinet){\r\n      item = cabinet[key];\r\n      cabinet[key] = callback(item, key, cabinet); // only two params.\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * For custom destroy.\r\n   * Call it to clear the sideEffect produce by kinds of plugins.\r\n   */\r\n  Proto.destroy = function(autoClear = true){\r\n    this._trigger(\"destroied\");\r\n    \r\n    if(autoClear){\r\n      this.clear({\r\n        reset: true,\r\n        onCloud: false, \r\n        concurrent: false,\r\n      });\r\n      this.removeStore();\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * Lazy methods support.\r\n * @param {*} Lycabinet \r\n */\r\nimport { DEBUG } from \"@/utils/util\";\r\n\r\nexport function InitLazyDepartment(Lycabinet){\r\n  \r\n  /**\r\n   * Add lazySave support.\r\n   * The params is the same to save methods.\r\n   */\r\n  Lycabinet.prototype.lazySave = (function(){\r\n    var lastTime = 0;\r\n    return function(...params){\r\n      var nowTime = new Date().getTime();\r\n      // The gap is not so accurate but enough.\r\n      let judge = nowTime - lastTime > 5000; //this.options.lazyPeriod;\r\n      this._trigger(\"lazySave\", judge);\r\n      if (judge) {\r\n        lastTime = nowTime; // first!\r\n        // Use default settings\r\n        DEBUG && console.log(\"Lazy executed!\", nowTime, lastTime, judge)\r\n        this.save(...params);\r\n      }\r\n      return this;\r\n    }\r\n  })();\r\n\r\n  /**\r\n   * Just calling lazySave after save called.\r\n   * @param {*} key \r\n   * @param {*} value \r\n   * @param {...any} params parameters to lazySave (). \r\n   */\r\n  Lycabinet.prototype.lazySet = function(key, value, ...params){\r\n    this.set(key, value).lazySave(...params);\r\n    return this;\r\n  }\r\n}","/**\r\n * Lycabinet Mixin.\r\n */\r\nexport function InitMixin(Lycabinet){\r\n  Lycabinet.prototype._mixins = []; // Shared by instances.\r\n\r\n  Lycabinet.mixin = function (mixinFunc) {\r\n    Lycabinet.prototype._mixins.push(mixinFunc);\r\n    return this;\r\n  };\r\n\r\n  Lycabinet.prototype.__install = function(...options){\r\n    options.unshift(this);\r\n    Lycabinet.prototype._mixins.forEach(func => {\r\n      func.apply(func, options);\r\n    });\r\n  };\r\n}","/**\r\n * Add alias to some methods.\r\n * To custom the using habit for general users.\r\n */\r\n\r\nexport function initAlias(Lycabinet){\r\n  const Proto = Lycabinet.prototype;\r\n  \r\n  Proto.delete = Proto.remove;\r\n\r\n  Proto.read = Proto.get;\r\n\r\n  Proto.storage = Proto.getCabinet;\r\n\r\n  Proto.isConsistent = Proto.isIdentical;\r\n}"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","invokeQueue","window","addEventListener","eve","forEach","func","deepAssign","objs","merged","reduce","target","source","item","is_PlainObject","is_Defined","v","toString","LogToken","IDLE","LOADING","Lycabinet","options","this","__init","apply","__cabinet","create","Proto","getCabinet","__storage","isIdentical","__root","hasStore","getStore","setStore","cabinet","removeStore","useSharedCabinet","shareCabinet","$removeStore","InitStore","Protos","FakeFunc","Function","_isHappend","_setlog","_once","_trigger","_off","_on","InitEventSystem","DEBUG","SeparateLog","initStorage","Error","str","constructor","String","defaultOptions","autoload","lazyPeriod","saveMutex","autoLazy","logEvent","deepMerge","localInterface","database","localStorage","getItem","setItem","removeItem","concurrent","outerLoad","outerSave","outerClear","__install","status","_init","writeBackflow","val","__tempStorage","Array","isArray","slice","length","keys","isLoadFromCache","assign","load","isVacant","set","value","indexOf","backValue","remove","removed","input","k","clear","option","onCloud","localClear","IgnoreLocal","localApi","toEnd","isSuccess","onceDone","pack","onSuccess","onError","msg","reason","console","error","reset","Reflect","ownKeys","e","localLoad","localTemp","initialData","JSON","parse","data","save","check","lazySave","localSave","finalData","stringify","callback","map","destroy","autoClear","InitCore","lastTime","params","nowTime","Date","getTime","judge","lazySet","InitLazyDepartment","_mixins","mixin","mixinFunc","push","unshift","InitMixin","delete","read","storage","isConsistent","initAlias"],"sourceRoot":""}