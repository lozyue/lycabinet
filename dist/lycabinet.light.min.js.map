{"version":3,"file":"lycabinet.light.min.js","mappings":"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","sources":["webpack://Lycabinet/webpack/universalModuleDefinition","webpack://Lycabinet/webpack/bootstrap","webpack://Lycabinet/webpack/runtime/define property getters","webpack://Lycabinet/webpack/runtime/hasOwnProperty shorthand","webpack://Lycabinet/./src/utils/util.ts","webpack://Lycabinet/./src/utils/status.ts","webpack://Lycabinet/./src/light.ts","webpack://Lycabinet/./src/core/store.ts","webpack://Lycabinet/./src/core/lycabinet.ts","webpack://Lycabinet/./src/core/lazy-support.ts","webpack://Lycabinet/./src/core/mixin.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Lycabinet\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Lycabinet\"] = factory();\n\telse\n\t\troot[\"Lycabinet\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * Utils.js.\r\n * By lozyue.\r\n */\r\n\r\n/**\r\n * Get the item in an array with index. Support negative index.\r\n * @param  {...any} objs \r\n */\r\nexport const arrayIndex = function (arr, index) {\r\n  index = (arr.length + index) % arr.length;\r\n  if (arr[index] === undefined) {\r\n    throw new Error(`The index ${index} in array ${arr.toString()} is overflowed!`);\r\n  }\r\n  return arr[index];\r\n}\r\n\r\n/**\r\n * Get the target curve path value of the source Object.\r\n * The curve path is a sequenced array\r\n * @param source \r\n * @param objPathes \r\n */\r\nexport function curveGet(source: Object, objPathes: string[]){\r\n  let interim = source, item = '';\r\n  for(let index=0; index<objPathes.length; index++){\r\n    item = objPathes[index];\r\n    interim = interim && interim[item]\r\n    if(interim === void 0 ){\r\n      return void 0;\r\n    };\r\n  }\r\n  return interim;\r\n}\r\n\r\n/**\r\n * Set the consistent even curve path of the source Object \r\n * The curve path is a sequenced array // dot split strings.\r\n * @param source \r\n * @param objPathes \r\n * @param {unknown|Function} value The value assign for the curve object target. Support callback that if target value is a function you should set it in call back.\r\n * @returns { number|true } The number indicator the failed position of the conflict path.\r\n */\r\n export function curveSet(source: Object, objPathes: string[], value: ((target: Object, name: string)=>any)| unknown= null){\r\n  let interim = source, item = '';\r\n  // not the last one.\r\n  let index=0;\r\n  for(; index<objPathes.length-1; index++){\r\n    item = objPathes[index];\r\n    if(is_Defined(interim[item]) ){\r\n      if(is_Object(interim[item])){\r\n        interim = interim[item];\r\n      } else {\r\n        // Unexpected non-object value.\r\n        return index;\r\n      }\r\n    } else \r\n      interim = interim[item] = {};\r\n  };\r\n  // the last\r\n  item = objPathes[index];\r\n  // assign the value.\r\n  if(is_Function(value))\r\n    (value as Function)(interim, item);\r\n  else\r\n    interim[item] = value;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Centralized management.\r\n * Add a listener to window storage event.\r\n * @param { Function } invoke Target invoke function or handle. \r\n * @param { Boolean } remove wheather the action is to remove added storage listener.\r\n */\r\nexport const addStoreListener = (()=>{\r\n  const invokeQueue: Function[]= [];\r\n  window.addEventListener(\"storage\", (eve)=>{\r\n    invokeQueue.forEach(func=>{\r\n      func(eve);\r\n    });\r\n  }, false); // default bubble.\r\n\r\n  return (invoke, remove = false)=>{\r\n    if(remove) \r\n      removeArrayItem(invokeQueue, invoke);\r\n    else invokeQueue.push(invoke);\r\n  }\r\n})();\r\n\r\n/**\r\n * Deep Object.assign source to target.\r\n * @param target\r\n * @param source\r\n */\r\nexport const deepAssign = function (...objs) {\r\n  let merged;\r\n  objs.reduce((target, source) => {\r\n    for (let item in source) {\r\n      if (!(target[item] && is_PlainObject(target[item])) ) {\r\n        target[item] = source[item];\r\n      } else {\r\n        deepAssign(target[item], source[item]);\r\n      }\r\n    }\r\n    merged = target;\r\n    return target;\r\n  }, objs[0]); // The third param is to set default value.\r\n  return merged;\r\n}\r\n\r\n/**\r\n * Just assign the item in supplement which not defined in target.\r\n * If you don't want to override the value of origin Object, supplement is the high performance choice.\r\n * Not deep mode.\r\n * @param {*} target \r\n * @param {*} supplement \r\n */\r\nexport function objectSupplement(target, supplement) {\r\n  let current = null;\r\n  for (let item in supplement) {\r\n    current = target[item];\r\n    if (is_Defined(current))\r\n      continue;\r\n    target[item] = supplement[item];\r\n  }\r\n  return target;\r\n}\r\n\r\n/**\r\n * Just assign the item in supplement which not defined in target.\r\n * If you don't want to override the value of origin Object, supplement is the high performance choice.\r\n * Deep mode by iterate each inner Object.\r\n * @param {*} target \r\n * @param {*} supplement \r\n */\r\nexport function deepSupplement<R extends Object, T extends Object> (target: R|null, supplement: T) {\r\n  if(!target) return supplement;\r\n  let current: unknown = null;\r\n  for (let item in supplement) {\r\n    current = (target as unknown as T)[item];\r\n    if (is_Defined(current)) {\r\n      if (!is_PlainObject(current as Object)) continue;\r\n      deepSupplement(current as Object, supplement[item]); // The `current` is a reference which could be assigned.\r\n    }\r\n    else\r\n      // current = supplement[item];\r\n      (target as unknown as T)[item] = supplement[item];\r\n  }\r\n  return target as (R & T);\r\n}\r\n\r\n\r\n/**\r\n * Simple deepClone with optional Function clone\r\n */\r\nexport function deepClone(val, substituteObj = Object.create(null), cloneFunc = true) {\r\n  if (is_PlainObject(val)) {\r\n    var res = substituteObj;\r\n    for (var key in val) {\r\n      res[key] = deepClone(val[key]);\r\n    }\r\n    return res;\r\n  } else if (is_Array(val)) {\r\n    return val.slice()\r\n  } else if (cloneFunc && is_Function(val)) {\r\n    return Object.create(val.prototype).constructor;\r\n  } else {\r\n    return val;\r\n  }\r\n}\r\n\r\nexport function iterateObject(source: Object, iterate: Function){\r\n  iterate(source);\r\n  for(let item in source){\r\n    if( is_PlainObject(source[item]) )\r\n      iterate(source, iterate);\r\n  }\r\n}\r\n\r\nexport const is_Defined = (v: unknown):Boolean => (v !== undefined && v !== null);\r\nexport const is_Object = (obj: unknown):Boolean => (obj instanceof Object || typeof obj === \"object\");\r\nexport const is_PlainObject = (obj: unknown):Boolean => (Object.prototype.toString.call(obj) === '[object Object]');\r\nexport const is_Array = (obj: unknown):Boolean => (Array.isArray && Array.isArray(obj) || obj instanceof Array || (typeof obj === 'object') && Object.prototype.toString.call(obj).slice(-6,-1)=== 'Array' );\r\nexport const is_String = (str: Object):Boolean => ((typeof str === 'string') && str.constructor == String);\r\nexport const is_Function = (obj: unknown):Boolean => (obj instanceof Function);\r\n\r\nexport const is_Empty = (val: unknown)=>{\r\n  if(!val) return true;\r\n  if(is_Array(val)){\r\n    return !(val as Array<unknown>).length;\r\n  }else{\r\n    return !Object.keys((val) as Object).length;\r\n  }\r\n}\r\n\r\n/*\r\n * Delete the Item in an Array, returning the new Array.\r\n */\r\nexport var removeArrayItem = (arr, item) => {\r\n  if (arr.length) {\r\n    let index = arr.indexOf(item);\r\n    if (index > -1) {\r\n      return arr.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Provide with a processor accept a list of stuff or single stuff\r\n * Give it the action to its inner iterator.\r\n * The original Stuff can not be an Array!\r\n */\r\nexport function arbitraryFree(input, func) {\r\n  if (input.forEach) {\r\n    return input.forEach(func);\r\n  } else {\r\n    return func(input, 0);\r\n  }\r\n}\r\n\r\nexport function storageAvailable(type) {\r\n  var storage;\r\n  try {\r\n    storage = window[type];\r\n    var x = '__storage_test__';\r\n    storage.setItem(x, x);\r\n    storage.removeArrayItem(x);\r\n    return true;\r\n  }\r\n  catch (e) {\r\n    return e instanceof DOMException && (\r\n      // everything except Firefox\r\n      e.code === 22 ||\r\n      // Firefox\r\n      e.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      e.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n      // acknowledge QuotaExceededError only if there's something already stored\r\n      (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production';\r\n\r\nexport const EnvAssociate = {\r\n  Light: false, // light mode.\r\n};\r\n","/**\r\n * Status for Mutex\r\n */\r\n\r\nconst CREATED = 'created';\r\nconst MOUNTED = 'mounted';\r\nconst IDLE = 'idle';\r\nconst LOADING = 'loading';\r\nconst SAVING = 'saving';\r\nconst CLEARING = 'clearing';\r\n\r\n\r\nexport {\r\n  CREATED,\r\n  IDLE,\r\n  LOADING,\r\n  SAVING,\r\n  CLEARING,\r\n  MOUNTED,\r\n};\r\n","/**\r\n * The Laction JS(lactionQueue JS) entry file.\r\n * Light version.\r\n * Only includes the core build.\r\n * For smaller build bundle.\r\n */\r\n\r\nimport { EnvAssociate } from './utils/util';\r\nimport { InitStore } from './core/store';\r\nimport { InitCore } from './core/lycabinet';\r\nimport { InitLazyDepartment } from './core/lazy-support';\r\nimport { InitMixin } from \"./core/mixin\";\r\n\r\n\r\n// set light on\r\nEnvAssociate.Light = true;\r\n/**\r\n * Using fake event system.\r\n * @param {*} Lycabinet \r\n */\r\nconst InitEventSystem = function(Lycabinet){\r\n  Lycabinet.prototype._setlog = new Function();\r\n  Lycabinet.prototype._once = new Function();\r\n  Lycabinet.prototype._trigger = new Function();\r\n  Lycabinet.prototype._off = new Function();\r\n  Lycabinet.prototype._on = new Function();\r\n}\r\n\r\n\r\nfunction Lycabinet(...options){\r\n  if (process.env.NODE_ENV !== 'production' && !(this instanceof Lycabinet) ) {\r\n    (global.warn || console.warn)('Lycabinet is a constructor and should be called with the `new` keyword');\r\n    return null;\r\n  }\r\n  this.__init.apply(this, options);\r\n}\r\n\r\nInitStore(Lycabinet);\r\nInitEventSystem(Lycabinet);\r\nInitCore(Lycabinet);\r\nInitLazyDepartment(Lycabinet);\r\nInitMixin(Lycabinet);\r\n\r\n/**\r\n * Manually select the optional Extends modules.\r\n */ \r\n// import { initImbedding } from './core/immbedding';\r\n// import { initAlias } from './extends/alias';\r\n// import { addFilter } from './extends/filter';\r\n// import { addObserver } from './extends/observer';\r\n\r\n// initImbedding(Lycabinet);\r\n// initAlias(Lycabinet);\r\n\r\n// addFilter(Lycabinet);\r\n// addObserver(Lycabinet);\r\n\r\nexport default Lycabinet;\r\n","/**\r\n * Given a private variable for every set storage.\r\n * Basement.\r\n */\r\n\r\nimport { DEBUG, is_Defined, is_PlainObject } from \"../utils/util\";\r\n\r\nexport function InitStore(Lycabinet){\r\n  const __cabinet = Object.create(null);\r\n\r\n  Lycabinet.prototype.hasStore = function(){\r\n    return is_Defined(__cabinet[this.__root]) && is_PlainObject(__cabinet[this.__root]);\r\n  }\r\n\r\n  /**\r\n   * Get the cabinet access.\r\n   * @returns {Plain Object} __cabinet ; The reference of the storage Object property.\r\n   * Each instance is shared by the root key.\r\n   */\r\n  Lycabinet.prototype.getStore = function(){\r\n    return __cabinet[this.__root];\r\n  }\r\n  \r\n  /**\r\n   * To initialize the __cabinet storage. \r\n   * @param {Plain Object} cabinet \r\n   */\r\n  Lycabinet.prototype.setStore = function(cabinet){\r\n    __cabinet[this.__root] = cabinet;\r\n  }\r\n\r\n  /**\r\n   * To clear the inner cache of cabinet.\r\n   */\r\n  Lycabinet.prototype.removeStore = function(){\r\n    __cabinet[this.__root] = void 0;\r\n  }\r\n\r\n  Lycabinet.$removeStore = function(root: string){\r\n    __cabinet[root] = void 0;\r\n  }\r\n\r\n  DEBUG && (Lycabinet.$getStore = function(root: string){\r\n    return __cabinet[root];\r\n  });\r\n}\r\n","/**\r\n * lycabinet.js\r\n * A high performance JSON Object storage helper.\r\n * 高性能的 JSON对象 小型数据存储辅助类\r\n * @createdTime 2021-03-28\r\n */\r\n\r\nimport * as _STATUS from '@/utils/status';\r\nimport { deepAssign, arbitraryFree, is_Defined, is_PlainObject, DEBUG, is_Empty, arrayIndex, is_String } from '@/utils/util';\r\n\r\ntype AccessOptions = Partial<{\r\n  onCloud: boolean|null, \r\n  concurrent: boolean|null,\r\n  deepMerge: boolean,\r\n  onceDone: (isSuccess: boolean, isCloud: boolean)=>unknown,\r\n}>\r\n\r\n/**\r\n * Init core.\r\n * @param {*} root \r\n * @param {Object} options => {\r\n *   initStorage => Object, // 初始化值\r\n *   outerSave => Function, // 自定义保存方法，接收一个参数，为存储的数据对象\r\n *   outerLoad => Function, // 自定义装载方法，返回一个对象，将Assign给数据存储对象\r\n * }\r\n * 注意：以上网络请求的外部通信方法需要返回一个Promise对象.\r\n */\r\nexport function InitCore(Lycabinet){\r\n  \r\n  /**\r\n   * The configuration initialization.\r\n   * @param { String } root \r\n   * @param { Object } options \r\n   */\r\n  Lycabinet.prototype.__init = function(root: string, options: Record<string, unknown> = {} ){\r\n\r\n    if(options.initStorage && !is_PlainObject(options.initStorage) ){\r\n      throw new Error(\"[Lycabinet]:The type of the provided option `initStorage` must be an Object!\");\r\n    }\r\n    if( !is_String(root)) \r\n      throw new Error(`[Lycabinet]: The param \"root\" should be an string, than type ${typeof root}!`);\r\n    this.__root = (root || 'lycabinet') + ''; // The key in storage. Must be a string.\r\n\r\n    // default options.\r\n    const defaultOptions = {\r\n      root: this.__root, // copy to options.\r\n      autoload: true, // 实例化后 自动调用._init 方法实例化. (并且此时init中会自动调用 load 方法. 默认使用 Object.assign 浅合并，可手动调用传参深度合并.)\r\n      lazyPeriod : ~~(options.lazyPeriod as number) || 5000, // set the lazy period of lazySave methods.\r\n      saveMutex: true, // 存储互斥 仅在 idle 状态可进行保存操作\r\n      autoLazy: true, // Call lazy save automaticly when the save is busy. \r\n      logEvent: false, // use this to log event globally from scratch\r\n      useSharedCabinet: true, // use global shared cabinet\r\n      shareCabinet: true, // share the cabinet for global\r\n      // Weather use deepAssign to contact when load the outer data.\r\n      // (If the observer is required, it is recommend you to always keep this on to prevent reference loss.)\r\n      deepMerge: false, \r\n      // local interfaces of storage\r\n      localInterface: {\r\n        database: window.localStorage,\r\n        getItem: \"getItem\", // method name, String\r\n        setItem: \"setItem\", // method name, String\r\n        removeItem: \"removeItem\", // method name, String\r\n      }, \r\n      \r\n      // Decide weather enable local cabinet when cloud is setted. Auto judge.\r\n      concurrence: !(options.outerLoad && options.outerSave && options.outerClear),\r\n      // cloud loads example options. The inner pointer `this` is pointed to `cabinet.options` if not set by arrow function.\r\n      outerLoad: ([root, cabinet], success, error)=>{\r\n        // data = load(root)\r\n        let data = {};\r\n        success(data);\r\n      },\r\n      outerSave: ([root, cabinet], success, error)=>{\r\n        // save(root, cabinet)\r\n        success();\r\n      },\r\n      outerClear: ([root, cabinet], success, error)=>{\r\n        // clear(root)\r\n        success();\r\n      },\r\n    };\r\n    this.options = deepAssign(defaultOptions, options);\r\n    // Make the privilege.\r\n    this.__install(this.options);\r\n    \r\n    // root event console log\r\n    if(this.options.logEvent) this._setlog();\r\n\r\n    this.status = _STATUS.CREATED; // status token\r\n    this._trigger(\"created\");\r\n    // From now you can have data access.\r\n    if(this.options.autoload) this._init(options.initStorage || Object.create(null) );\r\n  };\r\n\r\n  /**\r\n   * Initialize the cabinet storage before 'CURD' manipulation.\r\n   * If autoload is not setted, you should call this manually.\r\n   * Todo: add reduplicate._init check and warning.\r\n   */\r\n  Lycabinet.prototype._init = function(cabinet = Object.create(null)){\r\n    // write protection backflow\r\n    const writeBackflow = function(){\r\n      if(is_Empty(this.__tempStorage)) return;\r\n      // backflow\r\n      deepAssign(this.__storage, this.__tempStorage);\r\n      this.__tempStorage = Object.create(null);\r\n      this._trigger(\"writeBackflow\");\r\n    }\r\n    this._on(\"loaded\", writeBackflow);\r\n    this._on(\"cleared\", writeBackflow);\r\n\r\n    // override the options by the already existed cabinet.\r\n    // this is global shared with all the instance in the page.\r\n    if(this.options.useSharedCabinet && this.hasStore()){\r\n      // this.__storage = cabinet = this.getStore(); // That's useless cause cabinet is just a Object reference.\r\n      this.__storage = this.getStore();\r\n      // Sync status.\r\n      Object.assign(cabinet, this.__storage);\r\n      this._trigger(\"loadFromCache\");\r\n    }\r\n    else{\r\n      this.__storage = this.__storage || cabinet;\r\n      if(this.options.shareCabinet)\r\n        this.setStore(this.__storage);\r\n      // Auto load. Only when the cabinet in using is private.\r\n      if(this.options.autoload) this.load(false); // default using shallow assign.\r\n      else this.status = _STATUS.IDLE; // Amend the status error.\r\n    }\r\n\r\n    this.status = _STATUS.MOUNTED;\r\n    this._trigger(\"mounted\"); // Interior cabinet access attainable.\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Test the cabinet is busy or not.\r\n   */\r\n  Lycabinet.prototype.isVacant = function(){\r\n    return this.status===_STATUS.IDLE;\r\n  }\r\n\r\n  /**\r\n   * Set an item with key.\r\n   * Added write protection on stage of loading and clearing.\r\n   * @param {*} key \r\n   * @param {*} value \r\n   */\r\n  Lycabinet.prototype.set = function(key, value){\r\n    const MutexStatus = [_STATUS.LOADING, _STATUS.CLEARING];\r\n    // add write protection.    \r\n    if(MutexStatus.indexOf(this.status) > -1){\r\n      this._trigger(\"writeLock\");\r\n      this.__tempStorage = this.__tempStorage || (this.__tempStorage = Object.create(null));\r\n      this.__tempStorage[key] = value;\r\n      return this;\r\n    }\r\n\r\n    this.__storage[key] = value;\r\n    this._trigger('setItem', key, value);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Get the value of an item by key.\r\n   * Please don't read from loading and clearing stream.\r\n   * @param {*} key \r\n   */\r\n  Lycabinet.prototype.get = function(key){\r\n    let backValue = this.__storage[key];\r\n    this._trigger('getItem', key, backValue);\r\n    return backValue;\r\n  }\r\n\r\n  /**\r\n   * Delete an item by key.\r\n   */ \r\n  Lycabinet.prototype.remove = function(keys){\r\n    let removed = false;\r\n    arbitraryFree(keys, (k)=>{\r\n      // Though it isn't disappeared immediately, But after JSON parse and stringify manipulations this will be cleared.\r\n      if(this.__storage.hasOwnProperty(k)){\r\n        this.set(k, void 0);\r\n        removed = true\r\n      }\r\n    }); \r\n    this._trigger('removeItem', keys, removed);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Delete the cabinet directly.\r\n   * But the data may still exist in memory(RAM).  \r\n   * @param {Boolean} onCloud \r\n   * @param {Boolean} concurrent Override the default options in `this.options.concurrence`\r\n   */\r\n  Lycabinet.prototype.clear = function(option: AccessOptions = {}){\r\n    // merge default options.\r\n    const concurrent = is_Defined(option.concurrent)? option.concurrent: this.options.concurrence;\r\n    const onCloud = (is_Defined(option.onCloud)? option.onCloud: !!this.options.outerClear) as boolean;\r\n    this.status = _STATUS.LOADING;\r\n    this._trigger('beforeClear');\r\n    \r\n    // Local clear\r\n    let localClear = ()=>{\r\n      const IgnoreLocal = onCloud && !concurrent;\r\n      this._trigger('beforeLocalClear', IgnoreLocal); // give an status token before invoke.\r\n\r\n      if(IgnoreLocal){\r\n        DEBUG && console.log(\"[Lycabinet]: The local clear action is ignored by options: concurrence=false.\");\r\n        return this;\r\n      }\r\n      const localApi = this.options.localInterface;\r\n      localApi.database[localApi.removeItem]( this.__root );\r\n      // trigger hook event after call local database to clear the Item.\r\n      this._trigger('localCleared', this.__root); // Give the param of the remove target. \r\n    }\r\n\r\n    // Cloud clear\r\n    const pack = [this.__root, this.__storage];\r\n    const onSuccess = ()=>{\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('cleared', onCloud, concurrent);\r\n      // Callback\r\n      option.onceDone && option.onceDone(true, onCloud);\r\n    }\r\n    const onError = (msg, reason='')=>{\r\n      this._trigger(\"error\", \"clear\", \"cloudClearings\", reason);\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('cleared', onCloud, concurrent);\r\n      console.error(`[Lycabinet]: Failed to Clear the cabinet \"${this.__root}\" on cloud. ${msg}`);\r\n      // Callback\r\n      option.onceDone && option.onceDone(false, onCloud);\r\n    }\r\n\r\n    // handle this async or asyn easily.\r\n    try{\r\n      localClear();\r\n      if(onCloud) \r\n        this.options.outerClear(pack, onSuccess, onError);\r\n      else {\r\n        this.status = _STATUS.IDLE;\r\n        this._trigger('cleared', onCloud, concurrent);\r\n        // Callback\r\n        option.onceDone && option.onceDone(true, onCloud);\r\n      }\r\n    } catch(e){\r\n      onError(e, \"unknown\");\r\n      // Callback\r\n      option.onceDone && option.onceDone(false, onCloud);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Load the cabinet on initialization.\r\n   * The local load is faster than cloud.\r\n   * @param { Boolean } onCloud \r\n   * @param { Boolean } concurrent Override the default options in `this.options.concurrence`\r\n   * @param { Boolean } deepMerge Using deepAssign instead of Object.assign to merge the data from local and cloud.\r\n   */\r\n  Lycabinet.prototype.load = function(option: AccessOptions = {}){\r\n    // merge default options.\r\n    const concurrent = is_Defined(option.concurrent)? option.concurrent: this.options.concurrence;\r\n    const onCloud = (is_Defined(option.onCloud)? option.onCloud: !!this.options.outerLoad) as boolean;\r\n    const deepMerge = is_Defined(option.deepMerge)? ~~(option.deepMerge as Boolean): this.options.deepMerge;\r\n    this.status = _STATUS.LOADING;\r\n    this._trigger(\"beforeLoad\");\r\n\r\n    // Local load \r\n    let localLoad = ()=>{\r\n      let localTemp = null;\r\n      const IgnoreLocal = onCloud && !concurrent;\r\n      this._trigger('beforeLocalLoad', IgnoreLocal); // give an status token before invoke.\r\n\r\n      if(IgnoreLocal){\r\n        DEBUG && console.log(\"[Lycabinet]: The local load action is ignored by options: concurrence=false.\");\r\n        return this;\r\n      }\r\n      const localApi = this.options.localInterface;\r\n      \r\n      let initialData = localApi.database[localApi.getItem]( this.__root );\r\n      // trigger hook event after call local database to parse the value. Should have a return value in event. (data)=>{ return handle(data); }\r\n      initialData = this._trigger('localLoaded', initialData); // Only take effect on the last element.\r\n\r\n      localTemp = JSON.parse( initialData );\r\n      if(deepMerge)\r\n        deepAssign(this.__storage, localTemp);\r\n      else\r\n        Object.assign(this.__storage, localTemp);\r\n    };\r\n\r\n    // Cloud load\r\n    const pack = [this.__root, this.__storage];\r\n    const onSuccess = (data)=>{\r\n      if(!is_Defined(data) || !is_PlainObject(data))\r\n        throw new Error(`[Lycabinet]: Load cabinet with empty 'data' which type is ${typeof data}`);\r\n        \r\n      if(deepMerge)\r\n        deepAssign(this.__storage, data);\r\n      else \r\n      // shallow assign makes cloud weight heavier.\r\n        Object.assign(this.__storage, data);\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('loaded', onCloud, concurrent);\r\n      // Callback\r\n      option.onceDone && option.onceDone(true, onCloud);\r\n    }\r\n    const onError = (msg, reason='')=>{\r\n      this._trigger(\"error\", \"load\", \"cloudLoadings\", reason);\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('loaded', onCloud, concurrent);\r\n      console.error(`[Lycabinet]: Failed to Load the cabinet \"${this.__root}\" on cloud. ${msg}`);\r\n      // Callback\r\n      option.onceDone && option.onceDone(false, onCloud);\r\n    }\r\n\r\n    // handle this async or asyn easily.\r\n    try{\r\n      localLoad();\r\n      if(onCloud) \r\n        this.options.outerLoad(pack, onSuccess, onError);\r\n      else {\r\n        this.status = _STATUS.IDLE;\r\n        this._trigger('loaded', onCloud, concurrent);\r\n        // Callback\r\n        option.onceDone && option.onceDone(true, onCloud);\r\n      }\r\n    } catch(e){\r\n      onError(e, \"unknown\");\r\n      // Callback\r\n      option.onceDone && option.onceDone(false, onCloud);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Save the cabinet to database or cloud.\r\n   * @param {*} onCloud \r\n   * @param {Boolean} concurrent Override the default options in `this.options.concurrence`\r\n   */\r\n  Lycabinet.prototype.save = function(option: AccessOptions = {}){\r\n    // merge default options.\r\n    const onCloud = (is_Defined(option.onCloud)? option.onCloud: !!this.options.outerSave) as boolean;\r\n    const concurrent = is_Defined(option.concurrent)? option.concurrent: this.options.concurrence;\r\n\r\n    // check the status for mutex protection\r\n    let check = this.options.saveMutex && !this.isVacant();\r\n    this._trigger(\"beforeSave\", check);\r\n    if( check ){\r\n      DEBUG && console.log(`[Lycabinet]: The 'save' manipulation is deserted for busy. Current Status: ${this.status} .Set 'saveMutex' false to disable it.`);\r\n      this._trigger(\"busy\");\r\n      this.options.autoLazy && this.lazySave(onCloud, concurrent);\r\n      return this;\r\n    }\r\n    \r\n    this.status = _STATUS.SAVING;\r\n\r\n    // Local save \r\n    let localSave = ()=>{\r\n      const IgnoreLocal = onCloud && !concurrent;\r\n      this._trigger('beforeLocalSave', IgnoreLocal); // give an status token before invoke.\r\n\r\n      if(IgnoreLocal){\r\n        DEBUG && console.log(\"[Lycabinet]: The local save action is ignored by options: concurrence=false.\");\r\n        return this;\r\n      }\r\n      const localApi = this.options.localInterface;\r\n      // trigger hook event beforeLocalSave. Should have a return value in event. (data)=>{ return handle(data); }\r\n      let finalData = JSON.stringify(this.__storage );\r\n      // trigger hook event after call local database to save the value. Should return a String value in event.\r\n      finalData = this._trigger('localSaved', finalData); // Only take effect on the last element.\r\n\r\n      localApi.database[localApi.setItem](this.__root, finalData);\r\n    };\r\n    \r\n\r\n    // Cloud save\r\n    const pack = [this.__root, this.__storage];\r\n    const onSuccess = ()=>{\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('saved', onCloud, concurrent);\r\n      // Callback\r\n      option.onceDone && option.onceDone(true, onCloud);\r\n    }\r\n    const onError = (msg, reason=\"cloudSavings\")=>{\r\n      this._trigger(\"error\", \"save\", reason);\r\n      this.status = _STATUS.IDLE;\r\n      this._trigger('saved', onCloud, concurrent);\r\n      console.error(`[Lycabinet]: Failed to Save the cabinet \"${this.__root}\" on cloud. ${msg}`);\r\n      // Callback\r\n      option.onceDone && option.onceDone(false, onCloud);\r\n    }\r\n\r\n    // handle this async or asyn easily.\r\n    try{\r\n      localSave();\r\n      if(onCloud) \r\n        this.options.outerSave(pack, onSuccess, onError);\r\n      else {\r\n        this.status = _STATUS.IDLE;\r\n        this._trigger('saved', onCloud, concurrent);\r\n        // Callback\r\n        option.onceDone && option.onceDone(true, onCloud);\r\n      }\r\n    } catch(e){\r\n      onError(e, 'unknown');\r\n      // Callback\r\n      option.onceDone && option.onceDone(false, onCloud);\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Map methods support.\r\n   * Iterate the first hierarchy with callback.\r\n   * @param {Function: (item, index)=>any }} callback with two params\r\n   */\r\n  Lycabinet.prototype.forEach = function(callback){\r\n    let item, index = 0;\r\n    for(let key in this.__storage){\r\n      item = this.__storage[key];\r\n      callback(item, index++); // only two params.\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Foreach methods support.\r\n   * Iterate the first hierarchy with callback.\r\n   * @param {Function: (item, index)=>any }} callback  with two params\r\n   */\r\n  Lycabinet.prototype.map = function(callback){\r\n    let item, index = 0;\r\n    for(let key in this.__storage){\r\n      item = this.__storage[key];\r\n      this.__storage[key] = callback(item, index++); // only two params.\r\n    }\r\n  }\r\n}\r\n","import { DEBUG } from \"@/utils/util\";\r\n\r\n/**\r\n * Lazy methods support.\r\n * @param {*} Lycabinet \r\n */\r\nexport function InitLazyDepartment(Lycabinet){\r\n  \r\n  /**\r\n   * Add lazySave support.\r\n   * The params is the same to save methods.\r\n   */\r\n  Lycabinet.prototype.lazySave = (function(){\r\n    var lastTime = 0;\r\n    return function(...params){\r\n      var nowTime = new Date().getTime();\r\n      // The gap is not so accurate but enough.\r\n      let judge = nowTime - lastTime > 5000; //this.options.lazyPeriod;\r\n      this._trigger(\"lazySave\", judge);\r\n      if (judge) {\r\n        lastTime = nowTime; // first!\r\n        // Use default settings\r\n        DEBUG && console.log(\"Lazy executed!\", nowTime, lastTime, judge)\r\n        this.save(...params);\r\n      }\r\n      return this;\r\n    }\r\n  })();\r\n\r\n  /**\r\n   * Just calling lazySave after save called.\r\n   * @param {*} key \r\n   * @param {*} value \r\n   * @param {...any} params parameters to lazySave (). \r\n   */\r\n  Lycabinet.prototype.lazySet = function(key, value, ...params){\r\n    this.set(key, value).lazySave(...params);\r\n    return this;\r\n  }\r\n}","/**\r\n * Lycabinet Mixin.\r\n */\r\nexport function InitMixin(Lycabinet){\r\n  Lycabinet.prototype._mixins = []; // Shared by instances.\r\n\r\n  Lycabinet.mixin = function (mixinFunc) {\r\n    Lycabinet.prototype._mixins.push(mixinFunc);\r\n    return this;\r\n  };\r\n\r\n  Lycabinet.prototype.__install = function(...options){\r\n    options.unshift(this);\r\n    Lycabinet.prototype._mixins.forEach(func => {\r\n      func.apply(func, options);\r\n    });\r\n  };\r\n}"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","invokeQueue","window","addEventListener","eve","forEach","func","deepAssign","objs","merged","reduce","target","source","item","is_PlainObject","is_Defined","v","toString","IDLE","LOADING","Lycabinet","options","this","__init","apply","__cabinet","create","hasStore","__root","getStore","setStore","cabinet","removeStore","$removeStore","InitStore","_setlog","Function","_once","_trigger","_off","_on","InitEventSystem","initStorage","Error","str","constructor","String","defaultOptions","autoload","lazyPeriod","saveMutex","autoLazy","logEvent","useSharedCabinet","shareCabinet","deepMerge","localInterface","database","localStorage","getItem","setItem","removeItem","concurrence","outerLoad","outerSave","outerClear","success","error","__install","status","_init","writeBackflow","val","__tempStorage","Array","isArray","slice","length","keys","__storage","assign","load","isVacant","set","value","indexOf","backValue","remove","removed","input","k","clear","option","concurrent","onCloud","localClear","IgnoreLocal","localApi","pack","onSuccess","onceDone","onError","msg","reason","console","e","localLoad","localTemp","initialData","JSON","parse","data","save","check","lazySave","localSave","finalData","stringify","callback","index","map","InitCore","lastTime","params","nowTime","Date","getTime","judge","lazySet","InitLazyDepartment","_mixins","mixin","mixinFunc","push","unshift","InitMixin"],"sourceRoot":""}